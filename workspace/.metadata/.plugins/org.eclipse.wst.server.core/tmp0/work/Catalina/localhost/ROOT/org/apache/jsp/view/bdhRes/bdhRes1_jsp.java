/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.85
 * Generated at: 2023-04-20 06:45:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view.bdhRes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class bdhRes1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\n");
      out.write("<script src=\"");
      out.print(request.getContextPath() );
      out.write("/js/js_kmw.js\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/css_kmw/res_css/rescommon.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/css_kmw/res_css/bdhRes1.css\">\n");
      out.write("\n");
      out.write("	<script>\n");
      out.write("		// 이 함수는 나중에 js로 빼야함	\n");
      out.write("		$(function(){\n");
      out.write("			$.setStepStyle(0);\n");
      out.write("		})\n");
      out.write("	</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<div id=\"container\">\n");
      out.write("		<header>\n");
      out.write("			<div id=\"text\">\n");
      out.write("				<p>헌혈의집 예약</p>\n");
      out.write("			</div>\n");
      out.write("			<div id=\"stepBox\">\n");
      out.write("				<div class=\"step\">\n");
      out.write("					<span>STEP1</span><br>\n");
      out.write("					<p>유의사항</p>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"step\">\n");
      out.write("					<span>STEP2</span><br>\n");
      out.write("					<p>헌혈의집 선택</p>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"step\">\n");
      out.write("					<span>STEP3</span><br>\n");
      out.write("					<p>날짜 및 시간 선택</p>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"step\">\n");
      out.write("					<span>STEP4</span><br>\n");
      out.write("					<p>개인정보입력 및 확인</p>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</header>\n");
      out.write("		<article>\n");
      out.write("			<div id=\"resInfo\">\n");
      out.write("				<div id=\"resimg\">\n");
      out.write("					<img src='");
      out.print(request.getContextPath());
      out.write("/images/resimg/달력.jpg'>\n");
      out.write("				</div>\n");
      out.write("				\n");
      out.write("				<div class=\"infoText\" id=\"infoText\">\n");
      out.write("					<p class=\"infoTitle\">헌혈예약이란?</p>\n");
      out.write("					<ul>\n");
      out.write("						<li class=\"infoContent\">\n");
      out.write("							헌혈하기 전에 홈페이지, 모바일, CRM센터 또는 혈액원 직원을 통해 헌혈장소, 날짜, 시간 및<br> \n");
      out.write("							헌혈종류를 미리 예약하고 헌혈의 참여하는 것을 말합니다. \n");
      out.write("						</li>\n");
      out.write("					</ul>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("			<!-- 이쪽에 헌혈 유의사항 이미지 넣기!! -->\n");
      out.write("			<div class=\"infoText\" id=\"infoText2\">\n");
      out.write("					<p class=\"infoTitle\">헌혈예약 장점</p>\n");
      out.write("					<ul>\n");
      out.write("						<li class=\"infoContent\">\n");
      out.write("							원하는 장소, 날짜, 시간에 헌혈참여가 가능합니다. \n");
      out.write("						</li>\n");
      out.write("						<li class=\"infoContent\">\n");
      out.write("							헌혈의집에서의 대기시간을 줄일 수 있습니다.\n");
      out.write("						</li>\n");
      out.write("					</ul>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"infoText\" id=\"infoText\">\n");
      out.write("					<p class=\"infoTitle\">유의사항</p>\n");
      out.write("					<ul>\n");
      out.write("						<li class=\"infoContent\">\n");
      out.write("							<p>예약 및 취소 시</p>\n");
      out.write("							<ul>\n");
      out.write("								<li>\n");
      out.write("									6개월 이내 헌혈의집으로 예약할 수 있으며, 당일 예약은 불가합니다.\n");
      out.write("								</li>\n");
      out.write("								<li>\n");
      out.write("									최근 헌혈혈액검사결과에 따라 예약이 제한될 수 있습니다. (예약 후 헌혈혈액검사결과 이상 판정 시 예약이 자동 취소되며 안내문자가 발송됩니다.)\n");
      out.write("								</li>\n");
      out.write("								<li>\n");
      out.write("									문자메시지로 예약현황을 안내해 드립니다. (예약 직후, 예약일 3일 전, 예약 당일)\n");
      out.write("								</li>\n");
      out.write("								<li>\n");
      out.write("									예약안내 문자를 받지 못하신 경우에는 예약현황을 확인해 주십시오.\n");
      out.write("								</li>\n");
      out.write("								<li>\n");
      out.write("									헌혈의집 사정으로 예약일정이 변경 또는 취소될 수 있으며, 예약일 이전에 헌혈 참여 시 예약이력은 자동 취소됩니다.\n");
      out.write("								</li>\n");
      out.write("							</ul>\n");
      out.write("						</li>\n");
      out.write("					</ul>\n");
      out.write("					<ul>\n");
      out.write("						<li class=\"infoContent\">\n");
      out.write("							<p>예약 후 방문 시</p>\n");
      out.write("							<ul>\n");
      out.write("								<li>\n");
      out.write("									예약시간 경과 시 예약이 취소되니 시간을 꼭 지켜주십시오.\n");
      out.write("								</li>\n");
      out.write("								<li>\n");
      out.write("									헌혈장소 도착 시 예약헌혈자임을 직원에게 말씀해 주십시오.\n");
      out.write("								</li>\n");
      out.write("								<li>\n");
      out.write("									당일 상황에 따라 헌혈 대기시간이 지연될 수 있습니다.\n");
      out.write("								</li>\n");
      out.write("								<li>\n");
      out.write("									긴급헌혈 또는 혈액재고 등에 따라 헌혈종류 변경을 요청드릴 경우 양해와 협조 부탁드립니다.\n");
      out.write("								</li>\n");
      out.write("								<li>\n");
      out.write("									전자문진에 미리 참여 후 방문하시는 경우 헌혈시간이 단축될 수 있습니다. (전자문진 참여 후 3일간 유효)\n");
      out.write("								</li>\n");
      out.write("							</ul>\n");
      out.write("						</li>\n");
      out.write("					</ul>\n");
      out.write("				</div>\n");
      out.write("				\n");
      out.write("		</article>\n");
      out.write("		<div id=\"btnwrap\">\n");
      out.write("			<input type=\"button\" value=\"홈으로가기\" class=\"btn\" id=\"preBtn\" onclick=\"location.href='/index.do'\">\n");
      out.write("			<input type=\"button\" value=\"다 음\" class=\"btn\" id=\"nextBtn\" onclick=\"location.href='/BdhRes2.do'\">\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
